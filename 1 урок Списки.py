
 # литерал списка в Python

#PyObject_VAR_HEAD — заголовок;
#ob_item — массив указателей на элементы списка;
#allocated — количество выделенной памяти под элементы списка.


#Вариант №1: Через литерал (выражение, создающее объект):

#elements = [1, 3, 5, 6]
#type(elements) <class 'list'>
#print(elements) [1, 3, 5, 6]


#Через функцию list():
#elements = list()
# type(elements) <class 'list'> 
# print(elements) []



#elements = [1, 2, 3, 'word']
#Индексы (позиции в списке) соответственно будут: 0, 1, 2, 3.
#elements[-4] 1 
#elements[-1] 'word'






#Добавление в список
#elements = [1, 2, 3, 'word']
#elements.append('meow')
#print(elements)


#Для простого примера, рассмотрим создание списка с нуля с помощью метода append() : 
elements = []
elements.append(1)
elements.append('word')
elements.append('meow')
print(elements)

#Добавление в список на указанную позицию
elements = [1, 2, 4]
print(elements) 
elements.insert(2, 3)
print(elements)

#Изменение элементов списка
elements = [2, 4, 6]
elements[2] = 8
print(elements)





#Удаление элемента из списка
#Для удаление из списка используют инструкцию del list[i], где list — список,
# i — индекс (позиция) элемента в списке:
elements = [1, "test", 5, 7]
del elements[1]
print(elements)

#Удалять можно как из текущего списка, так и из вложенных списков:
my_list = ["hello", "world", "!"]
elements = [1, my_list, "ok"]
del elements[1][2]
print(elements)

#Можно удалять целыми диапазонами:
elements = [2, 4, 6, 8, 12]
del elements[2:]  # удаляем все элементы после 2-го элемента (включительно)
print(elements)

elements = [2, 4, 6, 8, 12]
del elements[:3] # удаляем все элементы до 3-го элемента
print(elements) 


elements = [2, 4, 6, 8, 12]
del elements[1:3] # удаляем от 1-го элемента включительно до 3-го элемента
print(elements)

#Еще один способ удаления из списка — list.remove(x), где list — список, x — значение, 
#которое нужно удалить:
elements = [2, "test", 4]
elements.remove("test")
print(elements) 

#Как проверить наличие элемента в списке
#Для того чтобы проверить существование какого-либо элемента в списке,
#нужно воспользоваться оператором in. Рассмотрим на примере:

elements = ['слон', 'кот', 'лошадь', 'змея', 'рыба']
if 'кот' in elements:
	print('meow')




#Объединение списков
#Списки в Python можно объединять с помощью оператора + или метода extend . Выглядит это так:
a = [1, 3, 5]
b = [1, 2, 4, 6]
print(a + b)



#Копирование списка Python
a = [1, 2, 3]
b = a # переменной b присваивается не значение списка a, а его адрес
print(id(a), id(b))# a и b ссылаются на один и тот же список
b.append(4)
print(a, b)


#Для копирования списков можно использовать несколько вариантов:

#elements.copy() — встроенный метод copy (доступен с Python 3.3);
#list(elements) — через встроенную функцию list() ;
#copy.copy(elements) — функция copy() из пакета copy;
#elements[:] — через создание среза (устаревший синтаксис).

a = ["кот", "слон", "змея"]
b = a.copy()
print(id(a), id(b), a, b)



#Цикл по списку
#Для перебора списков в Python есть два цикла: for и while.
elements = [1, 2, 3, "meow"]
for el in elements:
	print(el)

#Попробуем построить цикл while. Он выполняется, когда есть какое-либо определённое условие:




#list.append(x) — позволяет добавлять элемент в конец списка;
#list1.extend(list2) — предназначен для сложения списков;
#list.insert(i, x) — служит для добавления элемента на указанную позицию(i — позиция, x — элемент);
#list.remove(x) — удаляет элемент из списка (только первое вхождение);
#list.clear() — предназначен для удаления всех элементов (после этой операции список становится пустым []);
#list.copy() — служит для копирования списков.
#list.count(x) — посчитает количество элементов x в списке;
#list.index(x) — вернет позицию первого найденного элемента x в списке;
#list.pop(i) — удалит элемент из позиции i ;
#list.reverse() — меняет порядок элементов в списке на противоположный;
#list.sort() — сортирует список.


#Вложенные списки
#Список может содержать объекты разных типов: числовые, буквенные, а также списки.
#Список списков выглядит следующим образом:

#elements = [1, 2, [0.1, 0.2, 0.3]]
elements = [1, 2, [0.1, 0.2, 0.3]]

elements = [["яблоки", 50], ["апельсины", 190], ["груши", 100]]
print(elements[0])
print(elements[1][0])


#Срезы
#Срезы (slices) — это подмножества элементов списка. Срезу нужны, когда необходимо извлечь часть списка из полного списка.
#У них есть свой собственный синтаксис. Записывается срез так же, как обращение к элементу, используя индекс. Пример:

#elements[START:STOP:STEP]
#В этом случае берётся срез от номера start (включительно) до stop (не включая его), а step — это шаг. По умолчанию start и stop равны 0, step равен 1.

elements = [0.1, 0.2, 1, 2, 3, 4, 0.3, 0.4]
int_elements = elements[2:6] # с 2-го элемента включительно по 6-й элемент
print(id(elements), id(int_elements)) # elements и int_elements - 2 разных списка 53219112 53183848
print(elements)  # срез не модифицирует исходный список
print(int_elements) 


#Генераторы списков
c = [c * 3 for c in 'list']
print(c)

#Пример генератора списка:
nums = [i for i in range(1, 15)]
print(nums)



#https://pythonchik.ru/osnovy/spiski-v-python#dobavlenie-v-spisok